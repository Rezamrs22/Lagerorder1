@page "/addproduct"
@using Lagerorder1.Shared.DTOs
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Json
@inject HttpClient Http


<h3>Lägg till produkt</h3>

<EditForm Model="@newProduct" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="name" class="form-label">Produktnamn</label>
        <InputText id="name" class="form-control" @bind-Value="newProduct.Name" />
        <ValidationMessage For="@(() => newProduct.Name)" />
    </div>

    <div class="mb-3">
        <label for="description" class="form-label">Beskrivning</label>
        <InputText id="description" class="form-control" @bind-Value="newProduct.Description" />
        <ValidationMessage For="@(() => newProduct.Description)" />
    </div>

    <div class="mb-3">
        <label for="price" class="form-label">Pris</label>
        <InputNumber id="price" class="form-control" @bind-Value="newProduct.Price" />
        <ValidationMessage For="@(() => newProduct.Price)" />
    </div>
    <div class="mb-3">
        <label for="stockStatus" class="form-label">Antal till lagret</label>
        <InputNumber id="stockStatus" class="form-control" TValue="int" @bind-Value="newProduct.StockStatus" />
        <small class="text-muted">Hur många enheter du lägger in i lagret nu.</small>
        <ValidationMessage For="@(() => newProduct.StockStatus)" />
    </div>
    <div class="mb-3">
        <label for="numberSold" class="form-label">Antal sålda</label>
        <InputNumber id="numberSold" class="form-control" TValue="int" @bind-Value="newProduct.NumberSold" />
        <small class="text-muted">Hur många enheter som redan sålts.</small>
        <ValidationMessage For="@(() => newProduct.NumberSold)" />
    </div>
    <div class="mb-3">
            <label for="category" class="form-label">Kategori</label>
            <InputSelect id="category" class="form-select" TValue="int" @bind-Value="newProduct.CategoryId">
                <option value="0" disabled>— Välj kategori —</option>
                @foreach (var c in categories)
                {
                    <option value="@c.CategoryId">@c.Name</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => newProduct.CategoryId)" />
    </div>

    <div class="mb-3">
            <label for="Size" class="form-label">Storlek</label>
            <InputSelect id="size" class="form-select" TValue="int" @bind-Value="newProduct.SizeId">
                <option value="0" disabled>— Välj storlek —</option>
                @foreach (var s in sizes)
                {
                    <option value="@s.SizeId">@s.Name</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => newProduct.SizeId)" />
    </div>

    <!-- <button type="submit" class="btn btn-primary">Lägg till produkt</button> -->
    <button type="submit" class="btn btn-primary" disabled="@isSubmitting">Lägg till produkt</button>

    @if (!string.IsNullOrWhiteSpace(success))
    {
        <div class="alert alert-success mt-3">@success</div>
    }
    @if (!string.IsNullOrWhiteSpace(submitError))
    {
        <div class="alert alert-danger mt-3">@submitError</div>
    }
    @if (!string.IsNullOrWhiteSpace(loadError))
    {
        <div class="alert alert-warning mt-3">@loadError</div>
    }
</EditForm>

@code {
    

     // ⬇️ Använd DTO i stället för EF-entity
    // Om du har en ProductCreateDto, byt till den här.
    ProductDto newProduct = new();   // Minst: Name, Description, Price, CategoryId, SizeId

    // ⬇️ Listor av DTOs för dropdowns
    List<CategoryDto> categories = new();
    List<SizeDto> sizes = new();

    bool isLoading = true;
    bool isSubmitting = false;
    string? loadError;
    string? submitError;
    string? success;

     protected override async Task OnInitializedAsync()
    {
        // ⬇️ Ladda BOTH kategorier och storlekar innan formuläret används
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        isLoading = true;
        loadError = null;

        try
        {
            
            // ⬇️ VIKTIGT: matcha din controller-route exakt.
            // Din CategoryController har [Route("api/[controller]")] => /api/Category
            categories = await Http.GetFromJsonAsync<List<CategoryDto>>("api/Category") 
                         ?? new();

            // ⬇️ Hämta storlekar från motsvarande Size-endpoint.
            // Byt "api/Size" till din faktiska route om den heter annorlunda.
            sizes = await Http.GetFromJsonAsync<List<SizeDto>>("api/Size")
                     ?? new();
        }
        catch (Exception ex)
        {
            loadError = $"Kunde inte hämta kategorier:/storlekar {ex.Message}";
            categories.Clear();
            sizes.Clear();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        submitError = null;
        success = null;
        isSubmitting = true;

        try
        {
            // Skicka bara nödvändiga fält
            var payload = new 
            { 
                newProduct.Name, 
                newProduct.Description, 
                newProduct.Price,
                newProduct.StockStatus,
                newProduct.NumberSold,
                newProduct.CategoryId, 
                newProduct.SizeId 
            };

            var resp = await Http.PostAsJsonAsync("api/product", payload);
            if (resp.IsSuccessStatusCode)
            {
                success = "Produkten skapades.";
                newProduct = new(); // nollställ formuläret
            }
            else
            {
                var body = await resp.Content.ReadAsStringAsync();
                submitError = $"API-svar: {(int)resp.StatusCode} {resp.ReasonPhrase}. {body}";
            }
        }
        catch (Exception ex)
        {
            submitError = ex.Message;
        }
        finally
        {
            isSubmitting = false;
        }
    }

}
