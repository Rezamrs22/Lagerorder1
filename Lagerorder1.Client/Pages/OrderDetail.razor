@page "/orderdetails"
@using System.Net.Http.Json
@using Lagerorder1.Shared.DTOs
@inject IJSRuntime JS
@inject HttpClient Http

<h3>Orderdetaljer</h3>

@if (isLoading)
{
    <div class="alert alert-info">Laddar ordrar…</div>
}
else if (!string.IsNullOrWhiteSpace(loadError))
{
    <div class="alert alert-danger">@loadError</div>
}
else if (orders.Count == 0)
{
    <div class="alert alert-light">Inga ordrar hittades.</div>
}
else
{
    <div class="list-group">
        @foreach (var o in orders)
        {
            var open = expanded.Contains(o.OrderId);
            <div class="list-group-item">
                <div class="d-flex justify-content-between align-items-start gap-3">
                    <div>
                        <div class="fw-semibold">
                            @($"Order #{o.OrderId}")
                            @if (!string.IsNullOrWhiteSpace(o.CustomerName))
                            {
                                <span class="text-muted"> • @o.CustomerName</span>
                            }
                        </div>
                        <div class="small text-muted">
                            @o.OrderDate.ToLocalTime().ToString("yyyy-MM-dd HH:mm")
                            • Summa: @OrderTotal(o).ToString("0.00")
                        </div>

                        <button class="btn btn-link p-0 mt-1"
                                @onclick="() => Toggle(o.OrderId)">
                            @(open ? "Mindre…" : "Mer…")
                        </button>
                    </div>

                    <!-- Streckkod till höger -->
                    <div class="barcode-wrap">
                        <img src="@($"api/Order/{o.OrderId}/barcode.svg")" class="barcode-img" alt="Streckkod" />
                    </div>
                    <button class="btn btn-danger btn-sm ms-3"
                            title="Ta bort ordern permanent"
                            @onclick="() => DeleteOrderAsync(o.OrderId)">
                        Ta bort order
                    </button>
                </div>

                <!-- Fäll ut detaljer -->
                <div class="collapsible @(open ? "show" : "") mt-2">
                    @if (o.OrderDetails?.Count > 0)
                    {
                        <div class="table-responsive">
                            <table class="table table-sm table-striped align-middle mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Produkt</th>
                                        <th>Storlek</th>
                                        <th class="text-end">Antal</th>
                                        <th class="text-end">Pris/st</th>
                                        <th class="text-end">Summa</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var d in o.OrderDetails)
                                    {
                                        <tr>
                                            <td>@(d.ProductName ?? $"#{d.ProductId}")</td>
                                            <td>@GetSizeName(d.ProductId)</td>
                                            <td class="text-end">@d.Quantity</td>
                                            <td class="text-end">@d.UnitPrice.ToString("0.00")</td>
                                            <td class="text-end">@((d.UnitPrice * d.Quantity).ToString("0.00"))</td>
                                        </tr>
                                    }
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <th colspan="4" class="text-end">Totalt</th>
                                        <th class="text-end">
                                            @o.OrderDetails.Sum(x => x.UnitPrice * x.Quantity).ToString("0.00")
                                        </th>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-muted small">Inga rader hittades.</div>
                    }
                </div>
            </div>
        }
    </div>
}

<style>
  /* mjuk fällning */
  .collapsible{max-height:0;overflow:hidden;transition:max-height .25s ease}
  .collapsible.show{max-height:1000px}
  /* streckkod till höger */
  .barcode-wrap{display:flex;justify-content:flex-end;align-items:center}
  .barcode-img{display:block;width:200px;height:22px}
</style>

@code {
    // --------- ENDPOINTS (PLURAL) ---------
    const string OrdersListEndpoint = "api/Order";             // returnerar List<OrderDto> (med OrderDetails)
    const string ProductsEndpoint   = "api/Product";            // returnerar List<ProductDto>
    const string SizesEndpoint      = "api/Size";               // returnerar List<SizeDto>
    static string BarcodeUrl(int id) => $"api/Order/{id}/barcode.svg"; // se till att denna action finns

    // --------- STATE ---------
    List<OrderDto> orders = new();
    HashSet<int> expanded = new();

    // ProductId -> ProductDto  (för storlek m.m.)
    Dictionary<int, ProductDto> productById = new();
    // SizeId -> SizeName
    Dictionary<int, string> sizeById = new();

    bool isLoading = true;
    string? loadError;

    // --------- LIFECYCLE ---------
    protected override async Task OnInitializedAsync()
    {
        await LoadOrdersAsync();     // laddar hela listan inkl. OrderDetails
        await EnsureProductsAsync(); // för storleksnamn
        await EnsureSizesAsync();    // för fallback via SizeId
    }

    // --------- DATA ---------
    private async Task LoadOrdersAsync()
    {
        isLoading = true; loadError = null;
        try
        {
            var result = await Http.GetFromJsonAsync<List<OrderDto>>(OrdersListEndpoint);
            orders = result ?? new();
        }
        catch (Exception ex)
        {
            loadError = $"Kunde inte hämta ordrar: {ex.Message}";
        }
        finally { isLoading = false; }
    }

    private async Task EnsureProductsAsync()
    {
        if (productById.Count > 0) return;
        try
        {
            var products = await Http.GetFromJsonAsync<List<ProductDto>>(ProductsEndpoint) ?? new();
            productById = products.ToDictionary(p => p.ProductId, p => p);
        }
        catch
        {
            productById = new();
        }
    }

    private async Task EnsureSizesAsync()
    {
        if (sizeById.Count > 0) return;
        try
        {
            var sizes = await Http.GetFromJsonAsync<List<SizeDto>>(SizesEndpoint) ?? new();
            sizeById = sizes.ToDictionary(s => s.SizeId, s => s.Name ?? "-");
        }
        catch
        {
            sizeById = new();
        }
    }

    // --------- UI ---------
    private void Toggle(int orderId)
    {
        if (!expanded.Add(orderId))
            expanded.Remove(orderId);
    }

    private static string GetBarcodeUrl(int orderId) => BarcodeUrl(orderId);

    private static decimal OrderTotal(OrderDto o)
        => o?.OrderDetails?.Sum(d => d.UnitPrice * d.Quantity) ?? 0m;

    // Storleksnamn via ProductId
    private string GetSizeName(int productId)
    {
        if (!productById.TryGetValue(productId, out var p))
            return "-";

        // Om ProductDto har SizeName – använd den
        var sizeNameProp = p.GetType().GetProperty("SizeName");
        if (sizeNameProp is not null)
        {
            var name = sizeNameProp.GetValue(p) as string;
            if (!string.IsNullOrWhiteSpace(name))
                return name!;
        }

        // Annars försök via SizeId -> sizeById
        var sizeIdProp = p.GetType().GetProperty("SizeId");
        if (sizeIdProp is not null)
        {
            var val = sizeIdProp.GetValue(p);
            if (val is int sizeId && sizeId != 0 && sizeById.TryGetValue(sizeId, out var nm))
                return nm;
        }

        return "-";
    }

    // Minimal SizeDto om du inte redan har den i Shared
    public class SizeDto
    {
        public int SizeId { get; set; }
        public string? Name { get; set; }
    }
    string? deleteError;

    private async Task DeleteOrderAsync(int orderId)
    {
        // Bekräfta
        var ok = await JS.InvokeAsync<bool>("confirm", $"Ta bort order #{orderId}? Detta går inte att ångra.");
        if (!ok) return;

        try
        {
            var resp = await Http.DeleteAsync($"api/Orders/{orderId}");
            if (resp.IsSuccessStatusCode)
            {
                // Ta bort lokalt från listan + stäng ev. expanderat
                expanded.Remove(orderId);
                orders = orders.Where(x => x.OrderId != orderId).ToList();
                StateHasChanged();
            }
            else
            {
                var msg = await resp.Content.ReadAsStringAsync();
                deleteError = $"Kunde inte ta bort ordern: {(int)resp.StatusCode} {resp.ReasonPhrase}. {msg}";
            }
        }
        catch (Exception ex)
        {
            deleteError = $"Kunde inte ta bort ordern: {ex.Message}";
        }
    }

}
