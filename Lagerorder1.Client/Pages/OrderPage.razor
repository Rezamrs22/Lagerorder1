@page "/orders"

@using System.Net.Http.Json
@using Lagerorder1.Shared.DTOs
@inject HttpClient Http  // API: HttpClient måste ha korrekt BaseAddress (https://localhost:xxxx/)

<h3>Produkter</h3>

@if (isLoading)
{
    <div class="alert alert-info">Laddar produkter…</div>
}
@if (!string.IsNullOrWhiteSpace(loadError))
{
    <div class="alert alert-danger">@loadError</div>
}

@if (products?.Count > 0)
{
    <div class="table-responsive">
        <table class="table table-striped align-middle">
            <thead>
                <tr>
                    <th>Namn</th>
                    <th>Beskrivning</th>
                    <th class="text-end">Pris</th>
                    <th class="text-end">Lager</th>
                    <th class="text-end">Sålda</th>
                    <th>Kategori</th>   @* visar CategoryName, inte CategoryId *@
                    <th>Storlek</th>    @* visar SizeName, inte SizeId *@
                    <th style="width:1%"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var p in products)
                {
                    var alreadyAdded = selected.Any(s => s.ProductId == p.ProductId);
                    <tr>
                        <td>@p.Name</td>
                        <td>@p.Description</td>
                        <td class="text-end">@p.Price</td>
                        <td class="text-end">@p.StockStatus</td>
                        <td class="text-end">@p.NumberSold</td>
                        <td>@(p.CategoryName ?? "-")</td>
                        <td>@(p.SizeName ?? "-")</td>
                        <td class="text-nowrap">
                            <button class="btn btn-primary btn-sm"
                                    @onclick="() => AddToSelected(p)"
                                    disabled="@alreadyAdded">
                                Order
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else if (!isLoading && string.IsNullOrWhiteSpace(loadError))
{
    <div class="alert alert-light">Inga produkter hittades.</div>
}

@if (selected.Count > 0)
{
    <h4 class="mt-4">Orderlista</h4>
    <div class="table-responsive">
        <table class="table table-bordered align-middle">
            <thead class="table-light">
                <tr>
                    <th>Namn</th>
                    <th>Beskrivning</th>
                    <th class="text-end">Pris</th>
                    <th class="text-end">Lager</th>
                    <th class="text-end">Sålda</th>
                    <th>Kategori</th>
                    <th>Storlek</th>
                    <th style="width:1%"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var p in selected)
                {
                    <tr>
                        <td>@p.Name</td>
                        <td>@p.Description</td>
                        <td class="text-end">@p.Price</td>
                        <td class="text-end">@p.StockStatus</td>
                        <td class="text-end">@p.NumberSold</td>
                        <td>@(p.CategoryName ?? "-")</td>
                        <td>@(p.SizeName ?? "-")</td>
                        <td class="text-nowrap">
                            <button class="btn btn-danger btn-sm"
                                    @onclick="() => RemoveFromSelected(p.ProductId)">
                                Ta bort
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    // Data
    List<ProductDto> products = new();
    List<ProductDto> selected = new();

    // UI-state
    bool isLoading = true;
    string? loadError;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        isLoading = true;
        loadError = null;

        try
        {
            // API: Hämta produkter — din controller har [Route("api/[controller]")] => /api/Product
            //     Justera till absolut URL om du inte har BaseAddress satt på HttpClient.
            var result = await Http.GetFromJsonAsync<List<ProductDto>>("api/Product");
            products = result ?? new();
        }
        catch (Exception ex)
        {
            // API: Fel fångas här — kan vara fel port, CORS, fel path (api/Product vs api/Products), etc.
            loadError = $"Kunde inte hämta produkter: {ex.Message}";
            products = new();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void AddToSelected(ProductDto p)
    {
        if (!selected.Any(s => s.ProductId == p.ProductId))
        {
            selected.Add(p);
        }
    }

    private void RemoveFromSelected(int productId)
    {
        var i = selected.FindIndex(s => s.ProductId == productId);
        if (i >= 0) selected.RemoveAt(i);
    }
}