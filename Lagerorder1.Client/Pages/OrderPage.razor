@page "/orders"

@using System.Net.Http.Json
@using Lagerorder1.Shared.DTOs
@inject HttpClient Http 
@inject NavigationManager Nav

<h3>Produkter</h3>

@if (isLoading)
{
    <div class="alert alert-info">Laddar produkter…</div>
}
@if (!string.IsNullOrWhiteSpace(loadError))
{
    <div class="alert alert-danger">@loadError</div>
}

@if (products?.Count > 0)
{
    <div class="table-responsive">
        <table class="table table-striped align-middle">
            <thead>
                <tr>
                    <th>Namn</th>
                    <th>Beskrivning</th>
                    <th class="text-end">Pris</th>
                    <th class="text-end">Lager</th>
                    <th>Kategori</th>
                    <th>Storlek</th>
                    <th style="width:1%"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var p in products)
                {
                    <tr>
                        <td>@p.Name</td>
                        <td>@p.Description</td>
                        <td class="text-end">@p.Price.ToString("0.00")</td>
                        <td class="text-end">@p.StockStatus</td>
                        <td>@(p.CategoryName ?? "-")</td>
                        <td>@(p.SizeName ?? "-")</td>
                        <td class="text-nowrap">
                        @if (p.StockStatus <= 0)
                            {
                                <span class="text-danger ms-2">Slut i lager</span>
                            }
                            <button class="btn btn-primary btn-sm"
                                    @onclick="() => AddToSelected(p)"
                                    disabled="@(p.StockStatus <= 0)">
                                Order
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else if (!isLoading && string.IsNullOrWhiteSpace(loadError))
{
    <div class="alert alert-light">Inga produkter hittades.</div>
}

@if (orderLines.Count > 0)
{
    <h4 class="mt-4">Orderlista</h4>
    <div class="table-responsive">
        <table class="table table-bordered align-middle">
            <thead class="table-light">
                <tr>
                    <th>Namn</th>
                    <th>Beskrivning</th>
                    <th class="text-end">Pris</th>
                    <th class="text-end">Valda</th>
                    <th>Kategori</th>
                    <th>Storlek</th>
                    <th style="width:1%"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var line in orderLines)
                {
                    var prod = products.FirstOrDefault(p => p.ProductId == line.ProductId);
                    <tr>
                        <td>@line.Name</td>
                        <td>@line.Description</td>
                        <td class="text-end">@line.Price.ToString("0.00")</td>
                        <td class="text-end">
                            @line.SelectedQty
                            <div class="btn-group btn-group-sm ms-2" role="group" aria-label="Ändra kvantitet">
                                <button class="btn btn-outline-secondary"
                                        @onclick="() => RemoveOneFromSelected(line.ProductId)">
                                    −
                                </button>
                                <button class="btn btn-outline-secondary"
                                        @onclick="() => { if (prod is not null) AddToSelected(prod!); }"
                                        disabled="@(prod is null || prod.StockStatus <= 0)">
                                    +
                                </button>
                            </div>
                            
                        </td>
                        <td>@(line.CategoryName ?? "-")</td>
                        <td>@(line.SizeName ?? "-")</td>
                        <td class="text-nowrap">
                            <button class="btn btn-danger btn-sm"
                                    title="Ta bort hela raden"
                                    @onclick="() => RemoveLine(line.ProductId)">
                                Ta bort
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="d-flex justify-content-between align-items-center mt-2">
        <input class="form-control w-auto" style="min-width:280px" @bind="customerName" placeholder="Kundnamn (valfritt)" />
        <div class="fs-5"><strong>Summa:</strong> @Total.ToString("0.00")</div>
    </div>

    <div class="d-flex justify-content-end mt-2">
        <button class="btn btn-success"
                @onclick="SubmitOrderAsync"
                disabled="@(isSubmitting || orderLines.Count == 0)">
            @if (isSubmitting)
            {
                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
            }
            Slutför order
        </button>
    </div>
    @if (!string.IsNullOrWhiteSpace(submitError))
    {
        <div class="alert alert-danger mt-2">@submitError</div>
    }
}

@if (orderConfirmation is not null)
{
    <div class="alert alert-success alert-dismissible fade show mt-4" role="alert">
        <div><strong>Order skapad:</strong> @orderConfirmation.OrderNumber</div>
        <button type="button" class="btn-close" aria-label="Close" @onclick="CloseConfirmation"></button>
        <div class="mt-3">
            <button class="btn btn-outline-primary me-2"
                    type="button"
                    @onclick="GoToOrderDetails">
                Visa orderdetaljer
            </button>
        </div>
    </div>

    <div class="border p-2 mb-1 rounded">
        <div class="d-flex justify-content-between align-items-center mb-2">
            <div class="fw-semibold">Streckkod (Code-128)</div>
            <button class="btn btn-sm btn-outline-secondary" @onclick="CloseConfirmation">Stäng</button>
        </div>

        <div class="barcode-wrap">
            <div class="barcode">
                @((MarkupString)orderConfirmation.BarcodeSvg)
            </div>
        </div>
        <div class="text-muted mt-1">Skanna streckkoden vid behov.</div>

        
        @if (submittedLines.Count > 0)
        {
            <h6 class="mt-3">Produkter</h6>
            <div class="table-responsive">
                <table class="table table-sm table-striped table-compact align-middle mb-0">
                    <thead class="table-light">
                        <tr>
                            <th>Namn</th>
                            <th>Storlek</th>
                            <th class="text-end">Antal</th>
                            <th class="text-end">Pris/st</th>
                            <th class="text-end">Radsumma</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var sl in submittedLines)
                        {
                            <tr>
                                <td>@sl.Name</td>
                                <td>@(sl.SizeName ?? "-")</td>
                                <td class="text-end">@sl.SelectedQty</td>
                                <td class="text-end">@sl.Price.ToString("0.00")</td>
                                <td class="text-end">@((sl.Price * sl.SelectedQty).ToString("0.00"))</td>
                            </tr>
                        }
                    </tbody>
                    <tfoot>
                        <tr>
                            <th colspan="4" class="text-end">Summa</th>
                            <th class="text-end">
                                @submittedLines.Sum(x => x.Price * x.SelectedQty).ToString("0.00")
                            </th>
                        </tr>
                    </tfoot>
                </table>
            </div>
        }
    </div>
}

<style>
    .barcode-wrap{
    display:flex;
    justify-content:flex-start;
    margin:0;
    padding:0;
  }
  .barcode{ line-height:0; }   
  .barcode svg{
    width: 500px;               
    height: 50px;              
    display:block;              
    max-width:none;
  }
</style>

@code {
    // Data
    List<ProductDto> products = new();
    List<OrderLine> orderLines = new();
    List<OrderLine> submittedLines = new();   

    // UI-state
    bool isLoading = true;
    string? loadError;

    //Order Submit
    bool isSubmitting = false;
    string? submitError;
    OrderConfirmationDto? orderConfirmation;
    bool showConfirmation = false;


     string? customerName;

    decimal Total => orderLines.Sum(l => l.Price * l.SelectedQty);


    // Order-rad
    class OrderLine
    {
        public int ProductId { get; set; }
        public string? Name { get; set; }
        public string? Description { get; set; }
        public decimal Price { get; set; }
        public int SelectedQty { get; set; }           // "Valda"
        public string? CategoryName { get; set; }
        public string? SizeName { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        isLoading = true;
        loadError = null;

        try
        {
            // API: hämta produkter (justera path om din controller heter något annat)
            var result = await Http.GetFromJsonAsync<List<ProductDto>>("api/Product");
            products = result ?? new();
        }
        catch (Exception ex)
        {
            loadError = $"Kunde inte hämta produkter: {ex.Message}";
            products = new();
        }
        finally
        {
            isLoading = false;
        }
    }

    // Lägg till 1 st av vald produkt (skapar rad om den inte finns)
    private void AddToSelected(ProductDto p)
    {
        if (p is null || p.StockStatus <= 0) return;

        // 1) minska lagersaldo
        p.StockStatus--;

        // 2) öka/eller skapa orderrad
        var line = orderLines.FirstOrDefault(x => x.ProductId == p.ProductId);
        if (line is null)
        {
            orderLines.Add(new OrderLine
            {
                ProductId = p.ProductId,
                Name = p.Name,
                Description = p.Description,
                Price = p.Price,
                SelectedQty = 1,
                CategoryName = p.CategoryName,
                SizeName = p.SizeName
            });
        }
        else
        {
            line.SelectedQty++;
        }
    }

    // Ta bort 1 st från orderraden (tar bort raden om kvantiteten blir 0)
    private void RemoveOneFromSelected(int productId)
    {
        var line = orderLines.FirstOrDefault(x => x.ProductId == productId);
        if (line is null) return;

        // Återför +1 till originalproduktens lager
        var original = products.FirstOrDefault(p => p.ProductId == productId);
        if (original is not null)
            original.StockStatus++;

        line.SelectedQty--;
        if (line.SelectedQty <= 0)
            orderLines.Remove(line);
    }

    // Ta bort hela raden och återställ allt till lagret
    private void RemoveLine(int productId)
    {
        var line = orderLines.FirstOrDefault(x => x.ProductId == productId);
        if (line is null) return;

        var original = products.FirstOrDefault(p => p.ProductId == productId);
        if (original is not null)
            original.StockStatus += line.SelectedQty;

        orderLines.Remove(line);
    }
    
    private async Task SubmitOrderAsync()
    {
        submitError = null; orderConfirmation = null; isSubmitting = true;

        try
        {
            var request = new CreateOrderDto
            {
                CustomerName = string.IsNullOrWhiteSpace(customerName) ? "Gäst" : customerName!,
                OrderDetails = orderLines.Select(l => new CreateOrderDetailDto
                {
                    ProductId = l.ProductId,
                    Quantity = l.SelectedQty
                }).ToList()
            };

            // Byt endast denna rad:
            var resp = await Http.PostAsJsonAsync("api/Order", request);

            resp.EnsureSuccessStatusCode();

            orderConfirmation = await resp.Content.ReadFromJsonAsync<OrderConfirmationDto>();
            showConfirmation = true;

            submittedLines = orderLines.Select(l => new OrderLine
            {
                ProductId = l.ProductId,
                Name = l.Name,
                Description = l.Description,
                Price = l.Price,
                SelectedQty = l.SelectedQty,
                CategoryName = l.CategoryName,
                SizeName = l.SizeName
            }).ToList();

            orderLines.Clear();
            customerName = null;
            await LoadProducts();
        }
        catch (Exception ex)
        {
            submitError = $"Kunde inte spara ordern: {ex.Message}";
        }
        finally { isSubmitting = false; }
    }

    private void CloseConfirmation()
    {
        showConfirmation = false;
        orderConfirmation = null;
        submittedLines.Clear();
    }

    private void GoToOrderDetails()
    {
        Nav.NavigateTo("/orderdetails");
    }

}
















<!-- 








@using System.Net.Http.Json
@using Lagerorder1.Shared.DTOs
@inject HttpClient Http  // API: HttpClient måste ha korrekt BaseAddress (https://localhost:xxxx/)

<h3>Produkter</h3>

@if (isLoading)
{
    <div class="alert alert-info">Laddar produkter…</div>
}
@if (!string.IsNullOrWhiteSpace(loadError))
{
    <div class="alert alert-danger">@loadError</div>
}

@if (products?.Count > 0)
{
    <div class="table-responsive">
        <table class="table table-striped align-middle">
            <thead>
                <tr>
                    <th>Namn</th>
                    <th>Beskrivning</th>
                    <th class="text-end">Pris</th>
                    <th class="text-end">Lager</th>
                    <th class="text-end">Sålda</th>
                    <th>Kategori</th>   @* visar CategoryName, inte CategoryId *@
                    <th>Storlek</th>    @* visar SizeName, inte SizeId *@
                    <th style="width:1%"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var p in products)
                {
                    
                    <tr>
                        <td>@p.Name</td>
                        <td>@p.Description</td>
                        <td class="text-end">@p.Price</td>
                        <td class="text-end">@p.StockStatus</td>
                        <td class="text-end">@p.NumberSold</td>
                        <td>@(p.CategoryName ?? "-")</td>
                        <td>@(p.SizeName ?? "-")</td>
                        <td class="text-nowrap">
                            <button class="btn btn-primary btn-sm"
                                    @onclick="() => AddToSelected(p)"
                                    disabled="@(p.StockStatus <= 0)">
                                Order
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else if (!isLoading && string.IsNullOrWhiteSpace(loadError))
{
    <div class="alert alert-light">Inga produkter hittades.</div>
}

@if (selected.Count > 0)
{
    <h4 class="mt-4">Orderlista</h4>
    <div class="table-responsive">
        <table class="table table-bordered align-middle">
            <thead class="table-light">
                <tr>
                    <th>Namn</th>
                    <th>Beskrivning</th>
                    <th class="text-end">Pris</th>    
                    <th class="text-end">Valda</th>
                    <th>Kategori</th>
                    <th>Storlek</th>
                    <th style="width:1%"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var p in selected)
                {
                    <tr>
                        <td>@p.Name</td>
                        <td>@p.Description</td>
                        <td class="text-end">@p.Price</td>
                        <td class="text-end">@p.StockStatus</td>

                        <td>@(p.CategoryName ?? "-")</td>
                        <td>@(p.SizeName ?? "-")</td>
                        @if (p.StockStatus <= 0)
                            {
                                <span class="text-danger ms-2">Slut i lager</span>
                            }
                        <td class="text-nowrap">
                            <button class="btn btn-danger btn-sm"
                                    @onclick="() => RemoveFromSelected(p.ProductId)">
                                Ta bort
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    // Data
    List<ProductDto> products = new();
    List<ProductDto> selected = new();

    // UI-state
    bool isLoading = true;
    string? loadError;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        isLoading = true;
        loadError = null;

        try
        {
            // API: Hämta produkter — din controller har [Route("api/[controller]")] => /api/Product
            //     Justera till absolut URL om du inte har BaseAddress satt på HttpClient.
            var result = await Http.GetFromJsonAsync<List<ProductDto>>("api/Product");
            products = result ?? new();
        }
        catch (Exception ex)
        {
            // API: Fel fångas här — kan vara fel port, CORS, fel path (api/Product vs api/Products), etc.
            loadError = $"Kunde inte hämta produkter: {ex.Message}";
            products = new();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void AddToSelected(ProductDto p)
    {
        if (!selected.Any(s => s.ProductId == p.ProductId))
        {
            if (p.StockStatus > 0)
            {
                // Minska lagersaldo med 1
                p.StockStatus--;

                // Lägg till en kopia i orderlistan
                selected.Add(new ProductDto
                {
                    ProductId = p.ProductId,
                    Name = p.Name,
                    Description = p.Description,
                    Price = p.Price,
                    StockStatus = p.StockStatus,
                    NumberSold = p.NumberSold,
                    CategoryName = p.CategoryName,
                    SizeName = p.SizeName
                });
            }
        }
    }


    private void RemoveFromSelected(int productId)
    {
        var i = selected.FindIndex(s => s.ProductId == productId);
        if (i >= 0)
        {
            // Hitta originalprodukten i listan
            var original = products.FirstOrDefault(p => p.ProductId == productId);
            if (original != null)
            {
                // Återställ lagersaldo med +1
                original.StockStatus++;
            }

            // Ta bort från orderlistan
            selected.RemoveAt(i);
        }
    }

} -->