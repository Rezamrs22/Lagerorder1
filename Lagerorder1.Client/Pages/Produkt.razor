@page "/produkt"
@using System.Globalization
@using System.Linq

<h1>Produkter</h1>

<div class="toolbar">
    <div class="cats">
        @foreach (var c in Categories)
        {
            <button class="chip @(category == c ? "active" : null)"
                    @onclick="(() => SetCategory(c))">
                @ToTitle(c)
            </button>
        }
    </div>

    <input class="search" placeholder="Sök produktnamn…"
           @bind="search" @bind:event="oninput" />
</div>

@if (!VisibleProducts.Any())
{
    <div class="empty">Inga produkter hittades.</div>
}
else
{
    <div class="list">
        @foreach (var p in VisibleProducts)
        {
            <div class="card">
                <div class="card-head">
                    <div class="title">@p.Name</div>
                    <span class="badge">@ToTitle(p.Category)</span>
                </div>

                <div class="price">Pris: <strong>@p.Price.ToString("C", sv)</strong></div>

                <div class="sizes">
                    <span class="label">Storlek:</span>
                    @foreach (var s in Sizes)
                    {
                        var qty = GetStock(p, s);
                        var isDisabled = qty == 0;
                        var isActive = GetSelectedSize(p) == s;

                        <button class="size-pill @(isActive ? "active" : null) @(isDisabled ? "disabled" : null)"
                                disabled="@isDisabled"
                                title="@(isDisabled ? "Slut i lager" : $"{qty} i lager")"
                                @onclick="(() => SelectSize(p, s))">
                            @s
                        </button>
                    }
                </div>

                <div class="stock-row">
                    <span>Lager (vald): <strong>@GetStock(p, GetSelectedSize(p)) st</strong></span>
                    <span class="spacer"></span>
                    @{
                        var cnt = GetStock(p, GetSelectedSize(p));
                        var cls = cnt == 0 ? "stock-zero" : (cnt <= 5 ? "stock-low" : "stock-ok");
                        var txt = cnt == 0 ? "Slut" : (cnt <= 5 ? "Lågt" : "I lager");
                    }
                    <span class="stock-pill @cls"><span class="dot"></span>@txt</span>
                    <span class="total">Totalt: <strong>@p.StockBySize.Values.Sum() st</strong></span>
                </div>
            </div>
        }
    </div>
}

<style>
    :root {
        --bg: #0b1220;
        --panel: #ffffff;
        --ink: #0f172a;
        --muted: #64748b;
        --chip: #eef2ff; 
        --chip-border: #c7d2fe; 
        --chip-active: #4f46e5; 

        --pill: #f1f5f9; 
        --pill-border: #cbd5e1; 
        --pill-active: #0ea5e9; 

        --ok: #16a34a; 
        --low: #ca8a04; 
        --zero: #dc2626; 

        --card-shadow: 0 12px 30px rgba(2,6,23,.10);
        --card-border: rgba(2,6,23,.10);
        --hover-border: rgba(79,70,229,.35);
    }

    h1 {
        font-weight: 800;
        margin: .5rem 0 1rem;
        background: linear-gradient(90deg,#4f46e5,#06b6d4);
        -webkit-background-clip: text;
        background-clip: text;
        color: transparent;
    }

    .toolbar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: .75rem;
        margin: .5rem 0 1rem;
        flex-wrap: wrap;
    }

    .cats {
        display: flex;
        gap: .5rem;
        flex-wrap: wrap
    }

    .chip {
        padding: .38rem .7rem;
        border-radius: 999px;
        border: 1px solid var(--chip-border);
        background: var(--chip);
        cursor: pointer;
        color: #3730a3;
        font-weight: 600;
        transition: .15s ease;
        box-shadow: 0 1px 0 rgba(2,6,23,.04);
    }

        .chip:hover {
            transform: translateY(-1px)
        }

        .chip.active {
            background: var(--chip-active);
            border-color: var(--chip-active);
            color: #fff
        }

    .search {
        padding: .5rem .7rem;
        border: 1px solid #e2e8f0;
        border-radius: .6rem;
        min-width: 220px;
        outline: none;
    }

        .search:focus {
            border-color: #94a3b8;
            box-shadow: 0 0 0 3px rgba(99,102,241,.18)
        }

    .empty {
        padding: .9rem 1rem;
        border: 1px dashed #cbd5e1;
        border-radius: .8rem;
        color: var(--muted);
        background: #f8fafc;
    }

    .list {
        display: grid;
        grid-template-columns: repeat(auto-fill,minmax(280px,1fr));
        gap: 1rem;
    }

    .card {
        border: 1px solid var(--card-border);
        border-radius: 1rem;
        background: var(--panel);
        padding: 1rem;
        box-shadow: var(--card-shadow);
        transition: border-color .15s ease, transform .12s ease;
    }

        .card:hover {
            border-color: var(--hover-border);
            transform: translateY(-2px)
        }

    .card-head {
        display: flex;
        align-items: center;
        gap: .5rem;
        justify-content: space-between;
        margin-bottom: .35rem
    }

    .title {
        font-weight: 700;
        color: var(--ink)
    }

    .badge {
        padding: .2rem .55rem;
        font-size: .78rem;
        border-radius: 999px;
        background: #eff6ff;
        color: #1d4ed8;
        border: 1px solid #bfdbfe;
    }

    .price {
        margin: .35rem 0 .6rem;
        color: #0f172a
    }

    .sizes {
        display: flex;
        flex-wrap: wrap;
        gap: .45rem;
        align-items: center;
        margin: .25rem 0 .6rem
    }

        .sizes .label {
            color: var(--muted);
            margin-right: .1rem
        }

    .size-pill {
        padding: .28rem .6rem;
        border: 1px solid var(--pill-border);
        border-radius: .6rem;
        background: var(--pill);
        cursor: pointer;
        font-weight: 600;
        color: #0f172a;
        transition: .15s ease;
    }

        .size-pill:hover {
            transform: translateY(-1px)
        }

        .size-pill.active {
            background: linear-gradient(90deg,#0ea5e9,#22d3ee);
            color: #fff;
            border-color: transparent
        }

        .size-pill.disabled {
            opacity: .45;
            cursor: not-allowed;
            filter: saturate(.5)
        }

    .stock-row {
        display: flex;
        gap: .75rem;
        align-items: center;
        flex-wrap: wrap
    }

    .spacer {
        flex: 1 1 auto
    }

    .stock-pill {
        display: inline-flex;
        align-items: center;
        gap: .4rem;
        padding: .18rem .55rem;
        border-radius: 999px;
        border: 1px solid var(--stock-color);
        color: var(--stock-color);
        font-weight: 600;
        background: #fff;
    }

        .stock-pill .dot {
            width: .5rem;
            height: .5rem;
            border-radius: 50%;
            background: var(--stock-color);
            display: inline-block
        }

    .stock-ok {
        --stock-color: var(--ok)
    }

    .stock-low {
        --stock-color: var(--low)
    }

    .stock-zero {
        --stock-color: var(--zero)
    }

    .total {
        color: var(--muted)
    }

    @@media (max-width:720px) {
        .toolbar {
            justify-content: flex-start
        }

        .search {
            width: 100%
        }
    }
</style>

@code {
    
    private readonly CultureInfo sv = CultureInfo.GetCultureInfo("sv-SE");

    
    private static readonly string[] Categories = new[] { "alla", "jacka", "tshirt", "keps", "byxor" };
    private static readonly string[] Sizes = new[] { "XS", "S", "M", "L", "XL" };

    
    private string category = "alla";
    private string? search;

    
    private List<Product> products = new();
    private Dictionary<string, string> selectedSize = new(); 

    protected override void OnInitialized()
    {
        
        products = new()
        {
            new Product { Id="1", Name="Vindjacka Svart", Category="jacka", Price=599m,
                StockBySize = new() { ["XS"]=2, ["S"]=3, ["M"]=4, ["L"]=2, ["XL"]=1 } },
            new Product { Id="2", Name="Basic Tee Vit", Category="tshirt", Price=149m,
                StockBySize = new() { ["XS"]=10, ["S"]=12, ["M"]=15, ["L"]=9, ["XL"]=5 } },
            new Product { Id="3", Name="Trucker Keps", Category="keps", Price=129m,
                StockBySize = new() { ["XS"]=0, ["S"]=0, ["M"]=20, ["L"]=0, ["XL"]=0 } },
            new Product { Id="4", Name="Cargo Byxa", Category="byxor", Price=399m,
                StockBySize = new() { ["XS"]=3, ["S"]=5, ["M"]=6, ["L"]=4, ["XL"]=2 } }
        };

        foreach (var p in products)
            selectedSize[p.Id] = FirstAvailableSize(p) ?? "M";
    }

   
    private List<Product> VisibleProducts =>
        products
            .Where(p => category == "alla" || p.Category == category)
            .Where(p => string.IsNullOrWhiteSpace(search) ||
                        (p.Name?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false))
            .ToList();

    private void SetCategory(string c) => category = c;

    private string? FirstAvailableSize(Product p)
    {
        foreach (var s in Sizes)
            if (GetStock(p, s) > 0) return s;
        return null;
    }

    private string GetSelectedSize(Product p) =>
        selectedSize.TryGetValue(p.Id, out var s) ? s : (FirstAvailableSize(p) ?? "M");

    private void SelectSize(Product p, string s)
    {
        if (GetStock(p, s) <= 0) return; 
        selectedSize[p.Id] = s;
    }

    private int GetStock(Product p, string size) =>
        p.StockBySize.TryGetValue(size, out var v) ? v : 0;

    private static string ToTitle(string c) => c switch
    {
        "alla" => "Alla",
        "jacka" => "Jacka",
        "tshirt" => "T-shirt",
        "keps" => "Keps",
        "byxor" => "Byxor",
        _ => c
    };

    private class Product
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string Category { get; set; } = string.Empty; 
        public decimal Price { get; set; }
        public Dictionary<string, int> StockBySize { get; set; } = new();
    }
}KK
