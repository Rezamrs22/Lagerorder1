@page "/produkt"
@using System.Globalization
@using System.Net.Http.Json
@using Lagerorder1.Shared.DTOs
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http

<h1>Produkter</h1>

<div class="button-container">
    <button class="@buttonClass" @onclick="ToggleForm">@buttonText</button>
</div>

<div id="addProductForm" class="@formCssClass">
    <h3>Lägg till produkt</h3>
    @if (isFormVisible)
    {
        <EditForm Model="@newProduct" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row">
                <div class="col-md-3 mb-3">
                    <label for="name" class="form-label">Produktnamn</label>
                    <InputText id="name" class="form-control input-small" @bind-Value="newProduct.Name" />
                    <ValidationMessage For="@(() => newProduct.Name)" />
                </div>
                <div class="col-md-3 mb-3">
                    <label for="price" class="form-label">Pris</label>
                    <InputNumber id="price" class="form-control input-small" @bind-Value="newProduct.Price" />
                    <ValidationMessage For="@(() => newProduct.Price)" />
                </div>
                <div class="col-md-3 mb-3">
                    <label for="stockStatus" class="form-label">Antal till lagret</label>
                    <InputNumber id="stockStatus" class="form-control input-small" TValue="int" @bind-Value="newProduct.StockStatus" />
                    <small class="text-muted">Hur många enheter du lägger in i lagret nu.</small>
                    <ValidationMessage For="@(() => newProduct.StockStatus)" />
                </div>
                <div class="col-md-3 mb-3">
                    <label for="numberSold" class="form-label">Antal sålda</label>
                    <InputNumber id="numberSold" class="form-control input-small" TValue="int" @bind-Value="newProduct.NumberSold" />
                    <small class="text-muted">Hur många enheter som redan sålts.</small>
                    <ValidationMessage For="@(() => newProduct.NumberSold)" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-3 mb-3">
                    <label for="category" class="form-label">Kategori</label>
                    <InputSelect id="category" class="form-select input-small" TValue="int" @bind-Value="newProduct.CategoryId">
                        <option value="0" disabled>— Välj kategori —</option>
                        @foreach (var c in categories)
                        {
                            <option value="@c.CategoryId">@c.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => newProduct.CategoryId)" />
                </div>

                <div class="col-md-3 mb-3">
                        <label for="Size" class="form-label">Storlek</label>
                        <InputSelect id="size" class="form-select input-small" TValue="int" @bind-Value="newProduct.SizeId">
                            <option value="0" disabled>— Välj storlek —</option>
                            @foreach (var s in sizes)
                            {
                                <option value="@s.SizeId">@s.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => newProduct.SizeId)" />
                </div>
                <div class="col-md-3 mb-3">
                    <label for="description" class="form-label">Beskrivning</label>
                    <InputText id="description" class="form-control input-small" @bind-Value="newProduct.Description" />
                    <ValidationMessage For="@(() => newProduct.Description)" />
                </div>

            </div>
        

            
            
            <!-- <button type="submit" class="btn btn-primary">Lägg till produkt</button> -->
            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">Lägg till produkt</button>

            @if (!string.IsNullOrWhiteSpace(success))
            {
                <div class="alert alert-success mt-3">@success</div>
            }
            @if (!string.IsNullOrWhiteSpace(submitError))
            {
                <div class="alert alert-danger mt-3">@submitError</div>
            }
            @if (!string.IsNullOrWhiteSpace(loadFormError))
            {
                <div class="alert alert-warning mt-3">@loadFormError</div>
            }
        </EditForm>
    }


</div>

<div class="toolbar">
    <div class="cats">
        @foreach (var c in Categories)
        {
            <button class="chip @(string.Equals(category, c, StringComparison.OrdinalIgnoreCase) ? "active" : null)"
                    @onclick="(() => SetCategory(c))">
                @ToTitle(c)
            </button>
        }
    </div>

    <input class="search" placeholder="Sök produktnamn…"
           @bind="search" @bind:event="oninput" />
</div>

@if (isLoadingList)
{
    <div class="empty">Laddar…</div>
}
else if (!string.IsNullOrWhiteSpace(loadListError))
{
    <div class="empty">@loadListError</div>
}
else if (!VisibleProducts.Any())
{
    <div class="empty">Inga produkter hittades.</div>
}
else
{
    <div class="list">
        @foreach (var p in VisibleProducts)
        {
            <div class="card">
                <div class="card-head">
                    <div class="title">@p.Name</div>
                    <span class="badge">@ToTitle(p.CategoryName)</span>
                </div>

                <div class="price">Pris: <strong>@p.Price.ToString("C", sv)</strong></div>

                @if (!string.IsNullOrWhiteSpace(p.SizeName))
                {
                    <div class="sizes">
                        <span class="label">Storlek:</span>
                        @{
                            // Hämta alla varianter (storlekar) för aktuell produkt p
                            var variants = products
                                .Where(v => v.ProductId == p.ProductId)
                                // sortera som du vill – här alfabetiskt på storleksnamn
                                .OrderBy(v => v.SizeName)
                                .ToList();

                            var selectedId = GetSelectedSizeId(p);
                        }

                        @foreach (var v in variants)
                        {
                            var qty = v.StockStatus;
                            var isDisabled = qty == 0;
                            var isActive = selectedId == v.SizeId;

                            <button class="size-pill @(isActive ? "active" : null) @(isDisabled ? "disabled" : null)"
                                    disabled="@isDisabled"
                                    title="@(isDisabled ? "Slut i lager" : $"{qty} i lager")"
                                    @onclick="(() => SelectSize(p, v.SizeId))">
                                @v.SizeName
                            </button>
                        }
                    </div>

                }

                @{
                    var stock = p.StockStatus;
                    var cls = StockClass(stock);
                    var txt = StockLabel(stock);
                }
                <div class="stock-row">
                    <span>Lager: <strong>@stock st</strong></span>
                    <span class="spacer"></span>
                    <span class="stock-pill @cls"><span class="dot"></span>@txt</span>
                    <span class="sold">Sålda: <strong>@p.NumberSold</strong></span>
                </div>
            </div>
        }
    </div>
}

<style>
    #addProductForm {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.6s ease-out, opacity 0.6s ease-out;
    opacity: 0;
    }

    #addProductForm.show {
    max-height: 1000px; /* tillräckligt för att visa hela formuläret */
    opacity: 1;
    }
    .input-small {
    max-width: 300px;
    }
    .button-container {
        display: inline-block;
        margin-bottom: 10px;
    }
    .btn-orange {
    background-color: orange;
    color: white;
    padding: 5px 50px;

    }
    .btn-orange:hover {
        background-color: red;
        color: white;
        border: none;
    }






    :root {
        --bg: #0b1220;
        --panel: #ffffff;
        --ink: #0f172a;
        --muted: #64748b;
        --chip: #eef2ff; 
        --chip-border: #c7d2fe; 
        --chip-active: #4f46e5; 

        --pill: #f1f5f9; 
        --pill-border: #cbd5e1; 
        --pill-active: #0ea5e9; 

        --ok: #16a34a; 
        --low: #ca8a04; 
        --zero: #dc2626; 

        --card-shadow: 0 12px 30px rgba(2,6,23,.10);
        --card-border: rgba(2,6,23,.10);
        --hover-border: rgba(79,70,229,.35);
    }

    h1 {
        font-weight: 800;
        margin: .5rem 0 1rem;
        background: linear-gradient(90deg,#4f46e5,#06b6d4);
        -webkit-background-clip: text;
        background-clip: text;
        color: transparent;
    }

    .toolbar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: .75rem;
        margin: .5rem 0 1rem;
        flex-wrap: wrap;
    }

    .cats {
        display: flex;
        gap: .5rem;
        flex-wrap: wrap
    }

    .chip {
        padding: .38rem .7rem;
        border-radius: 999px;
        border: 1px solid var(--chip-border);
        background: var(--chip);
        cursor: pointer;
        color: #3730a3;
        font-weight: 600;
        transition: .15s ease;
        box-shadow: 0 1px 0 rgba(2,6,23,.04);
    }

        .chip:hover {
            transform: translateY(-1px)
        }

        .chip.active {
            background: var(--chip-active);
            border-color: var(--chip-active);
            color: #fff
        }

    .search {
        padding: .5rem .7rem;
        border: 1px solid #e2e8f0;
        border-radius: .6rem;
        min-width: 220px;
        outline: none;
    }

        .search:focus {
            border-color: #94a3b8;
            box-shadow: 0 0 0 3px rgba(99,102,241,.18)
        }

    .empty {
        padding: .9rem 1rem;
        border: 1px dashed #cbd5e1;
        border-radius: .8rem;
        color: var(--muted);
        background: #f8fafc;
    }

    .list {
        display: grid;
        grid-template-columns: repeat(auto-fill,minmax(280px,1fr));
        gap: 1rem;
    }

    .card {
        border: 1px solid var(--card-border);
        border-radius: 1rem;
        background: var(--panel);
        padding: 1rem;
        box-shadow: var(--card-shadow);
        transition: border-color .15s ease, transform .12s ease;
    }

        .card:hover {
            border-color: var(--hover-border);
            transform: translateY(-2px)
        }

    .card-head {
        display: flex;
        align-items: center;
        gap: .5rem;
        justify-content: space-between;
        margin-bottom: .35rem
    }

    .title {
        font-weight: 700;
        color: var(--ink)
    }

    .badge {
        padding: .2rem .55rem;
        font-size: .78rem;
        border-radius: 999px;
        background: #eff6ff;
        color: #1d4ed8;
        border: 1px solid #bfdbfe;
    }

    .price {
        margin: .35rem 0 .6rem;
        color: #0f172a
    }

    .sizes {
        display: flex;
        flex-wrap: wrap;
        gap: .45rem;
        align-items: center;
        margin: .25rem 0 .6rem
    }

        .sizes .label {
            color: var(--muted);
            margin-right: .1rem
        }

    .size-pill {
        padding: .28rem .6rem;
        border: 1px solid var(--pill-border);
        border-radius: .6rem;
        background: var(--pill);
        cursor: pointer;
        font-weight: 600;
        color: #0f172a;
        transition: .15s ease;
    }

        .size-pill:hover {
            transform: translateY(-1px)
        }

        .size-pill.active {
            background: linear-gradient(90deg,#0ea5e9,#22d3ee);
            color: #fff;
            border-color: transparent
        }

        .size-pill.disabled {
            opacity: .45;
            cursor: not-allowed;
            filter: saturate(.5)
        }

    .stock-row {
        display: flex;
        gap: .75rem;
        align-items: center;
        flex-wrap: wrap
    }

    .spacer {
        flex: 1 1 auto
    }

    .stock-pill {
        display: inline-flex;
        align-items: center;
        gap: .4rem;
        padding: .18rem .55rem;
        border-radius: 999px;
        border: 1px solid var(--stock-color);
        color: var(--stock-color);
        font-weight: 600;
        background: #fff;
    }

        .stock-pill .dot {
            width: .5rem;
            height: .5rem;
            border-radius: 50%;
            background: var(--stock-color);
            display: inline-block
        }

    .stock-ok {
        --stock-color: var(--ok)
    }

    .stock-low {
        --stock-color: var(--low)
    }

    .stock-zero {
        --stock-color: var(--zero)
    }

    .total {
        color: var(--muted)
    }

    @@media (max-width:720px) {
        .toolbar {
            justify-content: flex-start
        }

        .search {
            width: 100%
        }
    }
</style>

@code {
    bool isFormVisible = false;

    void ToggleForm()
    {
        isFormVisible = !isFormVisible;
    }
    string buttonText => isFormVisible ? "     Stäng    " : "Lägg till produkt";
    string buttonClass => "btn " + (isFormVisible ? "btn-orange" : "btn-primary");

    string formCssClass => isFormVisible ? "show" : "";


    

     
    ProductDto newProduct = new();   

    
    List<CategoryDto> categories = new();
    List<SizeDto> sizes = new();

    bool isLoadingForm = true;
    bool isSubmitting = false;
    bool isLoadingList = true;
    string? loadListError;
    string? loadFormError;
    string? submitError;
    string? success;

     protected override async Task OnInitializedAsync()
    {
        
        await Task.WhenAll(LoadCategoriesAndSizes(), LoadProducts());
    }

    private async Task LoadCategoriesAndSizes()
    {
        isLoadingForm = true;
        loadFormError = null;

        try
        {
            
            
            categories = await Http.GetFromJsonAsync<List<CategoryDto>>("api/Category") 
                         ?? new();

           
            sizes = await Http.GetFromJsonAsync<List<SizeDto>>("api/Size")
                     ?? new();
        }
        catch (Exception ex)
        {
            loadFormError = $"Kunde inte hämta kategorier:/storlekar {ex.Message}";
            categories.Clear();
            sizes.Clear();
        }
        finally
        {
            isLoadingForm = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        submitError = null;
        success = null;
        isSubmitting = true;

        try
        {
            
            var payload = new 
            { 
                newProduct.Name, 
                newProduct.Description, 
                newProduct.Price,
                newProduct.StockStatus,
                newProduct.NumberSold,
                newProduct.CategoryId, 
                newProduct.SizeId 
            };

            var resp = await Http.PostAsJsonAsync("api/product", payload);
            if (resp.IsSuccessStatusCode)
            {
                success = "Produkten skapades.";
                newProduct = new(); 
            }
            else
            {
                var body = await resp.Content.ReadAsStringAsync();
                submitError = $"API-svar: {(int)resp.StatusCode} {resp.ReasonPhrase}. {body}";
            }
        }
        catch (Exception ex)
        {
            submitError = ex.Message;
        }
        finally
        {
            isSubmitting = false;
        }
    }




    // Kultur för å/ä/ö-sök
    private readonly CultureInfo sv = CultureInfo.GetCultureInfo("sv-SE");

    private List<ProductDto> products = new();
    private string category = "alla";
    private string? search;

    //private bool isLoading = true;
    //private string? loadError;

    //protected override async Task OnInitializedAsync() => await LoadProducts();

    private async Task LoadProducts()
    {
        isLoadingList = true;
        loadListError = null;

        try
        {
            products = await Http.GetFromJsonAsync<List<ProductDto>>("api/Product") ?? new();
        }
        catch (Exception ex)
        {
            loadListError = $"Kunde inte hämta produkter: {ex.Message}";
            products = new();
        }
        finally
        {
            isLoadingList = false;
        }
    }

    // --- Kategorier (dynamiskt) ---
    private List<string> Categories =>
        new[] { "alla" }
        .Concat(
            products
                .Select(p => p.CategoryName)                 // <- DTO-fält
                .Where(c => !string.IsNullOrWhiteSpace(c))
                .Select(c => c!)                             // släck nullability
                .Distinct(StringComparer.OrdinalIgnoreCase)
                .OrderBy(c => c, StringComparer.CurrentCultureIgnoreCase)
        )
        .ToList();

    // --- Filtrering ---
    private IEnumerable<ProductDto> VisibleProducts =>
        products
            .Where(p => CategoryMatches(p, category))
            .Where(p => MatchesSearch(p, search));

    private static bool CategoryMatches(ProductDto p, string selectedCategory)
    {
        if (string.IsNullOrWhiteSpace(selectedCategory) ||
            selectedCategory.Equals("alla", StringComparison.OrdinalIgnoreCase))
            return true;

        var cat = p.CategoryName;                            // <- DTO-fält
        return !string.IsNullOrWhiteSpace(cat) &&
               cat.Equals(selectedCategory, StringComparison.OrdinalIgnoreCase);
    }

    private bool MatchesSearch(ProductDto p, string? query)
    {
        if (string.IsNullOrWhiteSpace(query)) return true;
        var name = p?.Name ?? string.Empty;
        return sv.CompareInfo.IndexOf(name, query,
            CompareOptions.IgnoreCase | CompareOptions.IgnoreNonSpace) >= 0;
    }

    // UI-hjälp
    private static string ToTitle(string? c) => c switch
    {
        "alla" => "Alla",
        null or "" => "",
        _ => c
    };

    private static string StockClass(int stock) =>
         stock == 0 ? "stock-zero"
        : stock <= 5 ? "stock-low"
        : "stock-ok";

    private static string StockLabel(int stock) =>
         stock == 0 ? "Slut"
        : stock <= 5 ? "Lågt"
        : "I lager";

    private void SetCategory(string c) => category = c;



    // Håller vald storlek per produkt (ProductId -> SizeId)
    private readonly Dictionary<int, int> selectedSizeByProduct = new();

    // Returnerar vald sizeId för produkten, eller första tillgängliga
    private int? GetSelectedSizeId(ProductDto p) =>
    selectedSizeByProduct.TryGetValue(p.ProductId, out var sid)
        ? sid
        : GetFirstAvailableSizeId(p);

    // Första storlek med lager > 0
    private int? GetFirstAvailableSizeId(ProductDto p) =>
    products
        .Where(v => v.ProductId == p.ProductId && v.StockStatus > 0)
        .Select(v => (int?)v.SizeId)
        .FirstOrDefault();

    // Sätt vald storlek (ignorerar klick om slut i lager)
    private void SelectSize(ProductDto p, int sizeId)
    {
        var variant = products.FirstOrDefault(v => v.ProductId == p.ProductId && v.SizeId == sizeId);
        if (variant is null || variant.StockStatus <= 0) return;
        selectedSizeByProduct[p.ProductId] = sizeId;
    }

    // Hämta lager för specifik storlek
    private int GetStock(ProductDto p, int sizeId) =>
    products.FirstOrDefault(v => v.ProductId == p.ProductId && v.SizeId == sizeId)?.StockStatus ?? 0;

}







