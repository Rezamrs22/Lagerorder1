@page "/Account/Admin"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Lagerorder1.Data
@using Microsoft.EntityFrameworkCore

@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject ILogger<Admin> Logger

<p class="text-success">‚úÖ Admin.razor k√∂rs!</p>


@attribute [Authorize(Roles = "Manager,Admin")]


<h3>Admin Dashboard</h3>



<h4>Anv√§ndare och deras roller</h4>
<table class="table">
    <thead>
        <tr>
            <th>E-post</th>
            <th>Roller</th>
            <th>√Ötg√§rder</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in users)
        {
            <tr>
                <td>@user.Email</td>
                <td>@(user.Roles.Any() ? string.Join(", ", user.Roles) : "user roll")</td>
                <td>
                   

                    <!-- üîπ Ny knapp f√∂r att ta bort anv√§ndare -->
                    @if (!user.Roles.Contains("Admin") && !user.Roles.Contains("Manager"))
                    {
                     <button type="button"
                      class="btn btn-outline-danger btn-sm"
                      @onclick="@(() => ConfirmDeleteUser(user.Email))">
                      ‚ùå Ta bort anv√§ndare
                     </button>
                    }
                 

                </td>
            </tr>
        }
    </tbody>
</table>

@* üîπ Modal f√∂r rollborttagning *@
@if (showConfirmDialog)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Bekr√§fta borttagning</h5>
                    <button type="button" class="btn-close" @onclick="CloseDialog"></button>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(roleToDelete))
                    {
                        <p>√Ñr du s√§ker p√• att du vill radera rollen '<b>@roleToDelete</b>'?</p>
                    }
                    else if (!string.IsNullOrEmpty(userToDelete))
                    {
                        <p>√Ñr du s√§ker p√• att du vill ta bort anv√§ndaren '<b>@userToDelete</b>'?</p>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseDialog">Avbryt</button>
                    <button class="btn btn-danger" @onclick="DeleteConfirmed">Radera</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private string newRole = "";
    private string userEmail = "";
    private string assignRole = "";
    private List<string> roles = new();
    private List<UserWithRoles> users = new();

    // Modal state
    private bool showConfirmDialog = false;
    private string? roleToDelete;
    private string? userToDelete;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
    
        if (!user.Identity?.IsAuthenticated ?? true || !user.IsInRole("Admin"))
        {
            Navigation.NavigateTo("/Account/Login", forceLoad: true);
            return;
        }
    
        await LoadRoles();
        await LoadUsers();
    }


   @* private Task LoadRoles()
    {
        roles = RoleManager.Roles.Select(r => r.Name!).ToList();
        return Task.CompletedTask;
    }*@
    private async Task LoadRoles()
    {
        roles = await RoleManager.Roles.Select(r => r.Name!).ToListAsync();
      
    }

    private async Task LoadUsers()
    {
        users= new();
        var allUsers = UserManager.Users.ToList();
        foreach (var user in allUsers)
        {
            var userRoles = await UserManager.GetRolesAsync(user);
            users.Add(new UserWithRoles
            {
                Email = user.Email!,
                Roles = userRoles.ToList()
            });
        }
    }

    private async Task CreateRole()
    {
        if (!string.IsNullOrWhiteSpace(newRole))
        {
            if (!await RoleManager.RoleExistsAsync(newRole))
            {
                var result = await RoleManager.CreateAsync(new IdentityRole(newRole));
                if (result.Succeeded)
                {
                    await LoadRoles();
                    newRole = "";
                    StateHasChanged();
                }
            }
        }
    }

    private async Task AssignRole()
    {
        if (!string.IsNullOrWhiteSpace(userEmail) && !string.IsNullOrWhiteSpace(assignRole))
        {
            var user = await UserManager.FindByEmailAsync(userEmail);
            if (user != null && await RoleManager.RoleExistsAsync(assignRole))
            {
                var result = await UserManager.AddToRoleAsync(user, assignRole);
                if (result.Succeeded)
                {
                    userEmail = "";
                    assignRole = "";
                    await LoadUsers();
                    StateHasChanged();
                }
            }
        }
    }

    private async Task RemoveRole(string email, string role)
    {
        var user = await UserManager.FindByEmailAsync(email);
        if (user != null && await UserManager.IsInRoleAsync(user, role))
        {
            var result = await UserManager.RemoveFromRoleAsync(user, role);
            if (result.Succeeded)
            {
                await LoadUsers();
                StateHasChanged();
            }
        }
    }

    // üîπ Roll-borttagning
    private void ConfirmDeleteRole(string roleName)
    {
        roleToDelete = roleName;
        userToDelete = null;
        showConfirmDialog = true;
    }

    // üîπ User-borttagning
    private void ConfirmDeleteUser(string email)
    {
        userToDelete = email;
        roleToDelete = null;
        showConfirmDialog = true;
    }

    private void CloseDialog()
    {
        showConfirmDialog = false;
        roleToDelete = null;
        userToDelete = null;
    }

    private async Task DeleteConfirmed()
    {
        if (!string.IsNullOrEmpty(roleToDelete))
        {
            await DeleteRole(roleToDelete);
        }
        else if (!string.IsNullOrEmpty(userToDelete))
        {
            await DeleteUser(userToDelete);
        }

        CloseDialog();
    }

    private async Task DeleteRole(string roleName)
    {
        var role = await RoleManager.FindByNameAsync(roleName);
        if (role != null)
        {
            var result = await RoleManager.DeleteAsync(role);
            if (result.Succeeded)
            {
                await LoadRoles();
                await LoadUsers();
                StateHasChanged();
            }
        }
    }

    private async Task DeleteUser(string email)
    {
        var user = await UserManager.FindByEmailAsync(email);
        if (user != null)
        {
            var result = await UserManager.DeleteAsync(user);
            if (result.Succeeded)
            {
                await LoadUsers();
                StateHasChanged();
            }
        }
    }

    private class UserWithRoles
    {
        public string Email { get; set; } = "";
        public List<string> Roles { get; set; } = new();
    }
}







